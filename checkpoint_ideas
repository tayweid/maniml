# Step 1: Update Checkpoint Data Structure

# Remove 'state' field, rely only on namespace:
checkpoint = {
     'index': self.current_animation_index,
     'line_number': line_no,
     'namespace': checkpoint_namespace  # This contains all mobjects
}

# Step 2: Modify play() Method

def play(self, *animations, **kwargs):
     """Play animations with checkpoint support."""
     if hasattr(self, '_navigating_animations') and self._navigating_animations:
          return super().play(*animations, **kwargs)

     # Get the line number where this play was called
     frame = inspect.currentframe().f_back
     line_no = frame.f_lineno

     # Play the animation first
     result = super().play(*animations, **kwargs)

     # Capture the namespace AFTER animation completes
     namespace = frame.f_locals.copy()
     namespace.update(frame.f_globals)

     # Deep copy to create isolated namespace with independent mobjects
     import copy
     checkpoint_namespace = copy.deepcopy(namespace)

     # Create checkpoint
     self.current_animation_index += 1
     checkpoint = {
          'index': self.current_animation_index,
          'line_number': line_no,
          'namespace': checkpoint_namespace
     }

     self.animation_checkpoints.append(checkpoint)

     # Keep only last 50 checkpoints
     if len(self.animation_checkpoints) > 50:
          self.animation_checkpoints.pop(0)

     return result

Step 3: Update run_next_animation() Method

def run_next_animation(self):
     """Run the next animation using checkpoint_temporary workflow."""
     if self.current_animation_index >= len(self.animation_checkpoints) - 1:
          print("Already at last animation")
          return

     # Create checkpoint_temporary
     checkpoint_temporary = {}

     # Get current checkpoint
     current_checkpoint = self.animation_checkpoints[self.current_animation_index]
     next_index = self.current_animation_index + 1

     # Deep copy namespace from current checkpoint
     import copy
     checkpoint_temporary['namespace'] = copy.deepcopy(current_checkpoint['namespace'])

     # Clear the window
     self.clear()

     # Get previous state from self
     self.get_state()

     # Update self reference to point to current scene
     checkpoint_temporary['namespace']['self'] = self

     # Get the code to run
     if hasattr(self, '_scene_filepath') and self._scene_filepath:
          try:
               # [Code extraction logic remains the same]
               # ...

               # Execute the code
               exec(code_to_run, checkpoint_temporary['namespace'])

               # Animation completed, now finalize the checkpoint
               self.current_animation_index = next_index

               # Deep copy the namespace for storage
               final_namespace = copy.deepcopy(checkpoint_temporary['namespace'])

               # Create final checkpoint
               checkpoint_temporary['index'] = next_index
               checkpoint_temporary['line_number'] = next_line_number
               checkpoint_temporary['namespace'] = final_namespace

               # Add or update checkpoint
               if next_index < len(self.animation_checkpoints):
                    self.animation_checkpoints[next_index] = checkpoint_temporary
               else:
                    self.animation_checkpoints.append(checkpoint_temporary)

          finally:
               self._navigating_animations = False

Step 4: Update jump_to_animation() Method

def jump_to_animation(self, index):
     """Jump instantly to a specific animation checkpoint."""
     if index < 0 or index >= len(self.animation_checkpoints):
          print(f"Invalid index. Available checkpoints: 0-{len(self.animation_checkpoints)-1}")
          return

     checkpoint = self.animation_checkpoints[index]
     print(f"Jumping to animation #{index + 1}")

     # Clear scene
     self.clear()

     # Add all mobjects from state
     self.restore_state()

     self.current_animation_index = index
     self.update_frame(force_draw=True)

















